{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","syllable","setSyllable","studyState","toggleState","className","type","id","action","placeholder","pattern","required","onInput","currentTarget","value","htmlFor","onClick","data-title","StudyPlate","result","setResult","fails","setFails","style","textAlign","cursor","height","width","fontSize","speechSynthesis","speak","SpeechSynthesisUtterance","display","sampleSize","generateSyllables","map","syll","key","marginTop","secondLetter","kickMainSyllable","filter","l","letterFromArray","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8ebf49d3.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {sample, sampleSize} from 'lodash';\nfunction App() {\n    const [syllable, setSyllable] = useState('');\n    const [studyState, toggleState] = useState(false);\n    const pickText = ({currentTarget}) => setSyllable(currentTarget.value);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          {studyState ?\n              <StudyPlate syllable={syllable}  /> :\n              <>\n          <input className=\"c-checkbox\" type=\"checkbox\" id=\"checkbox\"/>\n              <div className=\"c-formContainer\">\n                  <form className=\"c-form\" action=\"\">\n                      <input className=\"c-form__input\" placeholder=\"–°–ª–æ–≥\" type=\"text\"\n                             pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{1,63}$\" required onInput={pickText}/>\n                          <label className=\"c-form__buttonLabel\" htmlFor=\"checkbox\">\n                              <button className=\"c-form__button\" type=\"button\" onClick={() => toggleState(true)}>–£—á–∏—Ç—å</button>\n                          </label>\n                          <label className=\"c-form__toggle\" htmlFor=\"checkbox\" data-title=\"–í–≤–µ—Å—Ç–∏ —Å–ª–æ–≥\"></label>\n                  </form>\n              </div>\n              </>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\nconst StudyPlate = ({syllable}) => {\n    const [result, setResult] = useState(0);\n    const [fails, setFails] = useState(0)\n    return <div style={{textAlign: '-webkit-center'}}>\n        <div style={{cursor: 'pointer', height: '64px', width: '64px', fontSize: '64px'}} onClick={() => {\n                speechSynthesis.speak(\n                    new SpeechSynthesisUtterance(syllable)\n                );\n\n        }} >\n            üîä\n        </div>\n\n        <div style={{display: 'flex'}}>\n            {sampleSize(generateSyllables(syllable), 4).map(syll => <div className=\"c-form__toggle-2\" key={syll} onClick={() => {\n                if (syllable === syll) {\n                    return setResult(result + 1)\n                }\n                return setFails(fails + 1)\n            }}>{syll}</div> ) }\n        </div>\n        {\n            <div style={{cursor: 'pointer', height: '64px', marginTop: '40px', fontSize: '64px'}}>\n                ‚úÖ - {result}\n                <br/>\n                ‚ùå - {fails}\n            </div>\n        }\n    </div>\n}\n\nconst generateSyllables = (syllable) => {\n    const secondLetter = syllable[1];\n    const arrayLetter = ['–∞', '–æ', '—ç', '—é', '–∏', '—ã', '—è'];\n    const kickMainSyllable = arrayLetter.filter(l => l !== syllable[0])\n    return  [syllable, ...sampleSize(kickMainSyllable, 3).map(letterFromArray =>  letterFromArray + secondLetter)]\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}