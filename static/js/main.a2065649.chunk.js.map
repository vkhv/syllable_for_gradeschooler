{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","syllable","setSyllable","studyState","toggleState","className","type","id","action","placeholder","pattern","required","onInput","currentTarget","value","htmlFor","onClick","data-title","StudyPlate","result","setResult","fails","setFails","style","textAlign","cursor","height","width","fontSize","speechSynthesis","speak","SpeechSynthesisUtterance","display","sampleSize","generateSyllables","map","syll","key","a","marginTop","secondLetter","kickMainSyllable","filter","l","letterFromArray","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0RA8BeA,MA3Bf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACJC,EADI,KACMC,EADN,OAEuBF,oBAAS,GAFhC,mBAEJG,EAFI,KAEQC,EAFR,KAIb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACbF,EACG,kBAAC,EAAD,CAAYF,SAAUA,IACtB,oCACE,2BAAOI,UAAU,aAAaC,KAAK,WAAWC,GAAG,aAC7C,yBAAKF,UAAU,mBACX,0BAAMA,UAAU,SAASG,OAAO,IAC5B,2BAAOH,UAAU,gBAAgBI,YAAY,2BAAOH,KAAK,OACxDI,QAAQ,qDAAoDC,UAAQ,EAACC,QAX7E,SAAC,GAAD,IAAEC,EAAF,EAAEA,cAAF,OAAqBX,EAAYW,EAAcC,UAYxC,2BAAOT,UAAU,sBAAsBU,QAAQ,YAC7C,4BAAQV,UAAU,iBAAiBC,KAAK,SAASU,QAAS,kBAAMZ,GAAY,KAA5E,mCAEJ,2BAAOC,UAAU,iBAAiBU,QAAQ,WAAWE,aAAW,wEAWpFC,EAAa,SAAC,GAAgB,IAAfjB,EAAc,EAAdA,SAAc,EACHD,mBAAS,GADN,mBACxBmB,EADwB,KAChBC,EADgB,OAELpB,mBAAS,GAFJ,mBAExBqB,EAFwB,KAEjBC,EAFiB,KAG/B,OAAO,yBAAKC,MAAO,CAACC,UAAW,mBAC3B,yBAAKD,MAAO,CAACE,OAAQ,UAAWC,OAAQ,OAAQC,MAAO,OAAQC,SAAU,QAASZ,QAAS,WACnFa,gBAAgBC,MACZ,IAAIC,yBAAyB9B,MAFzC,gBASA,yBAAKsB,MAAO,CAACS,QAAS,SACjBC,qBAAWC,EAAkBjC,GAAW,GAAGkC,KAAI,SAAAC,GAAI,OAAI,yBAAK/B,UAAU,mBAAmBgC,IAAKD,EAAMpB,QAAO,sBAAE,sBAAAsB,EAAA,sEACpGT,gBAAgBC,MAClB,IAAIC,yBAAyBK,IAFyE,UAItGnC,IAAamC,EAJyF,yCAM/FhB,EAAUD,EAAS,IAN4E,gCAQnGG,EAASD,EAAQ,IARkF,4CAS1Ge,OAGJ,yBAAKb,MAAO,CAACE,OAAQ,UAAWC,OAAQ,OAAQa,UAAW,OAAQX,SAAU,SAA7E,YACST,EACL,6BAFJ,YAGSE,KAMfa,EAAoB,SAACjC,GACvB,IAAMuC,EAAevC,EAAS,GAExBwC,EADc,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UACdC,QAAO,SAAAC,GAAC,OAAIA,IAAM1C,EAAS,MAChE,MAAM,CAAGA,GAAT,mBAAsBgC,qBAAWQ,EAAkB,GAAGN,KAAI,SAAAS,GAAe,OAAKA,EAAkBJ,QC3D9FK,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,8BAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,8BAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCvC/BE,I","file":"static/js/main.a2065649.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {sampleSize} from 'lodash';\r\nfunction App() {\r\n    const [syllable, setSyllable] = useState('');\r\n    const [studyState, toggleState] = useState(false);\r\n    const pickText = ({currentTarget}) => setSyllable(currentTarget.value);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n          {studyState ?\r\n              <StudyPlate syllable={syllable}  /> :\r\n              <>\r\n                <input className=\"c-checkbox\" type=\"checkbox\" id=\"checkbox\"/>\r\n                    <div className=\"c-formContainer\">\r\n                        <form className=\"c-form\" action=\"\">\r\n                            <input className=\"c-form__input\" placeholder=\"–°–ª–æ–≥\" type=\"text\"\r\n                             pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{1,63}$\" required onInput={pickText}/>\r\n                            <label className=\"c-form__buttonLabel\" htmlFor=\"checkbox\">\r\n                              <button className=\"c-form__button\" type=\"button\" onClick={() => toggleState(true)}>–£—á–∏—Ç—å</button>\r\n                            </label>\r\n                          <label className=\"c-form__toggle\" htmlFor=\"checkbox\" data-title=\"–í–≤–µ—Å—Ç–∏ —Å–ª–æ–≥\"></label>\r\n                        </form>\r\n                    </div>\r\n              </>}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst StudyPlate = ({syllable}) => {\r\n    const [result, setResult] = useState(0);\r\n    const [fails, setFails] = useState(0)\r\n    return <div style={{textAlign: '-webkit-center'}}>\r\n        <div style={{cursor: 'pointer', height: '64px', width: '64px', fontSize: '64px'}} onClick={() => {\r\n                speechSynthesis.speak(\r\n                    new SpeechSynthesisUtterance(syllable)\r\n                );\r\n\r\n        }} >\r\n            üîä\r\n        </div>\r\n\r\n        <div style={{display: 'flex'}}>\r\n            {sampleSize(generateSyllables(syllable), 4).map(syll => <div className=\"c-form__toggle-2\" key={syll} onClick={async () => {\r\n                await speechSynthesis.speak(\r\n                    new SpeechSynthesisUtterance(syll)\r\n                );\r\n                if (syllable === syll) {\r\n\r\n                    return setResult(result + 1)\r\n                }\r\n                return setFails(fails + 1)\r\n            }}>{syll}</div> ) }\r\n        </div>\r\n        {\r\n            <div style={{cursor: 'pointer', height: '64px', marginTop: '40px', fontSize: '64px'}}>\r\n                ‚úÖ - {result}\r\n                <br/>\r\n                ‚ùå - {fails}\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nconst generateSyllables = (syllable) => {\r\n    const secondLetter = syllable[1];\r\n    const arrayLetter = ['–∞', '–æ', '—ç', '—é', '–∏', '—ã', '—è'];\r\n    const kickMainSyllable = arrayLetter.filter(l => l !== syllable[0])\r\n    return  [syllable, ...sampleSize(kickMainSyllable, 3).map(letterFromArray =>  letterFromArray + secondLetter)]\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}